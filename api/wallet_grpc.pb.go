// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/wallet.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletService_CreateWallet_FullMethodName           = "/api.WalletService/CreateWallet"
	WalletService_CreatePermanentAddress_FullMethodName = "/api.WalletService/CreatePermanentAddress"
	WalletService_CreateOneTimeAddress_FullMethodName   = "/api.WalletService/CreateOneTimeAddress"
	WalletService_GetCoinBalance_FullMethodName         = "/api.WalletService/GetCoinBalance"
	WalletService_GetCustomerBalance_FullMethodName     = "/api.WalletService/GetCustomerBalance"
	WalletService_SendSingleTsx_FullMethodName          = "/api.WalletService/SendSingleTsx"
	WalletService_SendMultiplyTsx_FullMethodName        = "/api.WalletService/SendMultiplyTsx"
)

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletServiceClient interface {
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*WalletList, error)
	CreatePermanentAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*WalletItem, error)
	CreateOneTimeAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*WalletItem, error)
	GetCoinBalance(ctx context.Context, in *GetCoinBalanceRequest, opts ...grpc.CallOption) (*CoinBalance, error)
	GetCustomerBalance(ctx context.Context, in *GetCustomerBalanceRequest, opts ...grpc.CallOption) (*CustomerBalance, error)
	SendSingleTsx(ctx context.Context, in *SendSingleTsxRequest, opts ...grpc.CallOption) (*TransactionHash, error)
	SendMultiplyTsx(ctx context.Context, in *SendMultiplyTsxRequest, opts ...grpc.CallOption) (*TransactionHash, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*WalletList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WalletList)
	err := c.cc.Invoke(ctx, WalletService_CreateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CreatePermanentAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*WalletItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WalletItem)
	err := c.cc.Invoke(ctx, WalletService_CreatePermanentAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CreateOneTimeAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*WalletItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WalletItem)
	err := c.cc.Invoke(ctx, WalletService_CreateOneTimeAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetCoinBalance(ctx context.Context, in *GetCoinBalanceRequest, opts ...grpc.CallOption) (*CoinBalance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoinBalance)
	err := c.cc.Invoke(ctx, WalletService_GetCoinBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetCustomerBalance(ctx context.Context, in *GetCustomerBalanceRequest, opts ...grpc.CallOption) (*CustomerBalance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomerBalance)
	err := c.cc.Invoke(ctx, WalletService_GetCustomerBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SendSingleTsx(ctx context.Context, in *SendSingleTsxRequest, opts ...grpc.CallOption) (*TransactionHash, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionHash)
	err := c.cc.Invoke(ctx, WalletService_SendSingleTsx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SendMultiplyTsx(ctx context.Context, in *SendMultiplyTsxRequest, opts ...grpc.CallOption) (*TransactionHash, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionHash)
	err := c.cc.Invoke(ctx, WalletService_SendMultiplyTsx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations must embed UnimplementedWalletServiceServer
// for forward compatibility.
type WalletServiceServer interface {
	CreateWallet(context.Context, *CreateWalletRequest) (*WalletList, error)
	CreatePermanentAddress(context.Context, *CreateAddressRequest) (*WalletItem, error)
	CreateOneTimeAddress(context.Context, *CreateAddressRequest) (*WalletItem, error)
	GetCoinBalance(context.Context, *GetCoinBalanceRequest) (*CoinBalance, error)
	GetCustomerBalance(context.Context, *GetCustomerBalanceRequest) (*CustomerBalance, error)
	SendSingleTsx(context.Context, *SendSingleTsxRequest) (*TransactionHash, error)
	SendMultiplyTsx(context.Context, *SendMultiplyTsxRequest) (*TransactionHash, error)
	mustEmbedUnimplementedWalletServiceServer()
}

// UnimplementedWalletServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletServiceServer struct{}

func (UnimplementedWalletServiceServer) CreateWallet(context.Context, *CreateWalletRequest) (*WalletList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedWalletServiceServer) CreatePermanentAddress(context.Context, *CreateAddressRequest) (*WalletItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermanentAddress not implemented")
}
func (UnimplementedWalletServiceServer) CreateOneTimeAddress(context.Context, *CreateAddressRequest) (*WalletItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneTimeAddress not implemented")
}
func (UnimplementedWalletServiceServer) GetCoinBalance(context.Context, *GetCoinBalanceRequest) (*CoinBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinBalance not implemented")
}
func (UnimplementedWalletServiceServer) GetCustomerBalance(context.Context, *GetCustomerBalanceRequest) (*CustomerBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerBalance not implemented")
}
func (UnimplementedWalletServiceServer) SendSingleTsx(context.Context, *SendSingleTsxRequest) (*TransactionHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSingleTsx not implemented")
}
func (UnimplementedWalletServiceServer) SendMultiplyTsx(context.Context, *SendMultiplyTsxRequest) (*TransactionHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMultiplyTsx not implemented")
}
func (UnimplementedWalletServiceServer) mustEmbedUnimplementedWalletServiceServer() {}
func (UnimplementedWalletServiceServer) testEmbeddedByValue()                       {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	// If the following call pancis, it indicates UnimplementedWalletServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CreatePermanentAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreatePermanentAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CreatePermanentAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreatePermanentAddress(ctx, req.(*CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CreateOneTimeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateOneTimeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CreateOneTimeAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateOneTimeAddress(ctx, req.(*CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetCoinBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetCoinBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetCoinBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetCoinBalance(ctx, req.(*GetCoinBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetCustomerBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetCustomerBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetCustomerBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetCustomerBalance(ctx, req.(*GetCustomerBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SendSingleTsx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSingleTsxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SendSingleTsx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_SendSingleTsx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SendSingleTsx(ctx, req.(*SendSingleTsxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SendMultiplyTsx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMultiplyTsxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SendMultiplyTsx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_SendMultiplyTsx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SendMultiplyTsx(ctx, req.(*SendMultiplyTsxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _WalletService_CreateWallet_Handler,
		},
		{
			MethodName: "CreatePermanentAddress",
			Handler:    _WalletService_CreatePermanentAddress_Handler,
		},
		{
			MethodName: "CreateOneTimeAddress",
			Handler:    _WalletService_CreateOneTimeAddress_Handler,
		},
		{
			MethodName: "GetCoinBalance",
			Handler:    _WalletService_GetCoinBalance_Handler,
		},
		{
			MethodName: "GetCustomerBalance",
			Handler:    _WalletService_GetCustomerBalance_Handler,
		},
		{
			MethodName: "SendSingleTsx",
			Handler:    _WalletService_SendSingleTsx_Handler,
		},
		{
			MethodName: "SendMultiplyTsx",
			Handler:    _WalletService_SendMultiplyTsx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/wallet.proto",
}
